import csv
from typing import Any, List


class DataLogger:
    def __init__(self, dataset_id: str, shape: tuple, dimension: int, num_samples: int,
                 num_features: int):
        """
        Initializes the DataLogger with information about the dataset.

        Parameters:
            dataset_id (str): The name of the dataset.
            dimension (int): The number of dimensions in the dataset.
            shape (tuple): The shape of the dataset (e.g., for matrices or tensors).
            num_samples (int): The total number of samples in the dataset.
            num_features (int): The number of features for each sample in the dataset.
            num_observed (int): The number of observed variables in the dataset.
        """
        self.attributes = [dataset_id, dimension, shape, num_samples, num_features]

    def save_info(self, model: Any, results: List[Any], log: bool = False) -> None:
        """
        Saves model results and configuration to a CSV file.

        This method logs various attributes of the dataset, the model used, the target variable, and the results of
        model predictions. Optionally, it can also log this information to the console.

        Parameters:
            target (str): The name of the target variable for which the model was trained.
            model (Any): The model instance used for prediction or analysis.
            results (List[Any]): A list of results or metrics obtained from the model.
            problem_type (str): A string indicating the type of problem (e.g., 'classification', 'regression').
            log (bool, optional): If True, prints the logging information to the console. Defaults to False.

        Returns:
            None
        """

        model_name = model.__class__.__name__
        info = self.attributes + [model_name, model] + self.flatten_results(results)

        if log:
            print(f"Logging information for model: {model_name}")

        file_path = f'Results.csv'
        with open(file_path, 'a', newline='') as file:
            writer = csv.writer(file)
            writer.writerow(info)

    def flatten_results(self, results: List[Any]) -> List[Any]:
        """
        Recursively flattens a nested list or tuple structure into a flat list.

        This method is designed to handle complex nested structures, which can often be generated by data processing or
        model output. It simplifies these structures into a single list that can be easily logged or processed further.

        Parameters:
            results (List[Any]): A list that contains nested lists or tuples of result metrics (MSE, Accuracy).

        Returns:
            List[Any]: A flat list containing all elements from the original nested structure.
        """
        flat_list = []
        for item in results:
            if isinstance(item, list):
                flat_list.extend(self.flatten_results(item))
            elif isinstance(item, tuple):
                flat_list.extend(item)
            else:
                flat_list.append(item)
        return flat_list
